plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish'
}

def getVersionName = { ->
    return "1.0.7"
}

def getArtificialId = { ->
    return "firstjet"
}

android {
    compileSdk 32

    defaultConfig {
        minSdk 21
        targetSdk 32

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    libraryVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${archivesBaseName}-${variant.name}-${getVersionName()}.aar"
        }
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'
    implementation 'androidx.activity:activity-compose:1.3.1'
    implementation 'androidx.navigation:navigation-compose:2.5.1'
    implementation 'androidx.navigation:navigation-runtime-ktx:2.5.1'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
}

afterEvaluate {
    publishing {
        Properties githubProperties = new Properties()
        githubProperties.load(new FileInputStream(rootProject.file("jet.properties")))

        publications {
            android.libraryVariants.all { variant ->
                // Only consider release
                if (variant.buildType.name != "release") {
                    return
                }
                //use this kind of combination if you want to skip a publication
                //if (variant.flavorName == "production" && variant.buildType.name == "debug") return
                //if (variant.flavorName != "production" && variant.buildType.name == "release") return
                def filename = "${archivesBaseName}-${variant.name}-${getVersionName()}"
                println("-------------------------------" + filename)
                "${variant.name}"(MavenPublication) {
                    //println(variant.name)
                    groupId 'com.phongcoiydbg99.android'
                    artifactId = "${getArtificialId()}"
                    version = "${getVersionName()}"
                    artifact file("$buildDir/outputs/aar/${filename}.aar")
                    pom.withXml {
                        // for dependencies and exclusions
                        def dependenciesNode = asNode().appendNode('dependencies')
                        def configurationNames = ["implementation", "api", "runtimeOnly"]
                        configurationNames.each { confName ->
                            configurations[confName].allDependencies.each {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                                if (it.excludeRules.size() > 0) {
                                    def exclusionsNode = dependencyNode.appendNode('exclusions')
                                    it.excludeRules.each { rule ->
                                        def exclusionNode = exclusionsNode.appendNode('exclusion')
                                        exclusionNode.appendNode('groupId', rule.group)
                                        exclusionNode.appendNode('artifactId', rule.module)
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        repositories {
            maven {
                name = "jetpack-compose-demo"
                url = uri(githubProperties['gpr.uri'])
                credentials {
                    username = githubProperties['gpr.usr'] ?: System.getenv("GPR_USER")
                    password = githubProperties['gpr.key'] ?: System.getenv("GPR_API_KEY")
                }
            }
        }
    }
}

tasks.register('publishJet') {
    dependsOn 'assemble'
    dependsOn 'publish'
}